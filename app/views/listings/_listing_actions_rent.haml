= form_tag form_path, :method => :get, :id => "booking-dates" do

  - # Currently we show the selectors only for preauth process.
  - # However, there has been a plan to introduce these in other
  - # Processes (free) as well - rap1ds, 2.6.2015
  - if process != :postpay
    - if @listing.unit_type == :day
      - days = [:sunday, :monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday]
      - months = [:january, :february, :march, :april, :may, :june, :july, :august, :september, :october, :november, :december]
      - translated_days = days.map { |day_symbol| t("datepicker.days.#{day_symbol}") }.to_json
      - translated_days_short = days.map { |day_symbol| t("datepicker.days_short.#{day_symbol}") }.to_json
      - translated_days_min = days.map { |day_symbol| t("datepicker.days_min.#{day_symbol}") }.to_json
      - translated_months = months.map { |day_symbol| t("datepicker.months.#{day_symbol}") }.to_json
      - translated_months_short = months.map { |day_symbol| t("datepicker.months_short.#{day_symbol}") }.to_json

      - content_for :extra_javascript do
        :javascript
          /* Making all booked dates available in Javascript */
          var booked_dates = #{@booked_dates};

          /* Initialize datepicker with locale values */
          var loc = '#{I18n.locale}';
          if (loc !== 'en'){
            $.fn.datepicker.dates[loc] = {
              days: #{translated_days},
              daysShort: #{translated_days_short},
              daysMin: #{translated_days_min},
              months: #{translated_months},
              monthsShort: #{translated_months_short},
              today: "#{t("datepicker.today")}",
              weekStart: #{t("datepicker.week_start", default: 0)},
              clear: "#{t("datepicker.clear")}",
              format: "#{t("datepicker.format")}"
            };
          }

          $("#booking-dates").validate({
            submitHandler: function(form) {
              var $form = $(form);
              $form.find("#start-on").attr("name", "");
              $form.find("#end-on").attr("name", "");

              form.submit();
            }
          });

          window.ST.initializeDatePickerWithBookings('#datepicker', booked_dates, '#start-on', '#end-on', '#booking-start-output', '#booking-end-output', "today");
      .input-daterange.input-group.clearfix#datepicker{:data => {:locale => I18n.locale, :format => t("datepicker.format")}}
        .datepicker-start-wrapper
          = label_tag t("listings.listing_actions.booking_from")
          %input.input-sm.form-control.required#start-on{:type => 'text', :name => "start_on", :placeholder => t("datepicker.format"), :data => { :output => "booking-start-output" } }
          %input#booking-start-output{:type => 'hidden', :name => 'start_on'}

        .datepicker-end-wrapper
          = label_tag t("listings.listing_actions.booking_to")
          %input.input-sm.form-control.required#end-on{:type => 'text', :name => "end_on", :placeholder => t("datepicker.format"), :data => { :output => "booking-end-output" }}
          %input#booking-end-output{:type => 'hidden', :name => 'end_on'}

    - elsif listing_unit_type.present?
      - delivery_type = delivery_opts.length > 0 ? delivery_opts.first[:name].to_s : ""
      - shipping_price_additional = delivery_opts.length > 0 ? delivery_opts.first[:shipping_price_additional] : nil
      - content_for :extra_javascript do
        :javascript
          $("#booking-dates").validate({
            errorPlacement: function(error, element) {
              if (element.is("#quantity")) {
                error.insertAfter(".quantity-wrapper");
              } else {
                error.insertAfter(element);
              }
            }
          });
          window.ST.initializeQuantityValidation({validate: "positiveIntegers", input: "quantity", errorMessage: "#{t("errors.messages.positive_number")}" });
          if ("#{delivery_type}" == "shipping" && #{shipping_price_additional != nil}) {
            window.ST.initializeShippingPriceTotal('#quantity', '.delivery-price-value', '#{Maybe(delivery_opts)[0][:price].currency.decimal_mark.or_else(".")}');
          }

      .quantity-wrapper.input-group.clearfix
        .quantity-label-wrapper
          %label.quantity-label{for: 'quantity'}
            = ListingViewUtils.translate_quantity(@listing.unit_type, @listing.unit_selector_tr_key)
        .quantity-input.input-sm.required
          %input#quantity{type: 'number', placeholder: t("listings.quantity_placeholder"), name: 'quantity', value: 1, min: 1, step: 1}

  = render partial: "delivery_opts", locals: { delivery_opts: delivery_opts, is_author: is_author }

  = hidden_field_tag(:listing_id, @listing.id)

  %button.book-button
    .content
      = special_action_button_label

- if payment_gateway == :paypal && process != :none
  .row
    .col-12
      = render :partial => "listing_conversations/paypal_payment_methods", locals: { country_code: country_code }
