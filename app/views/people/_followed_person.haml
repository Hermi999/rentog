.people-fluid-thumbnail-grid-item
  = link_to person, :class => "fluid-thumbnail-grid-image-item-link" do
    .fluid-thumbnail-grid-image-image-container
      = large_avatar_thumb(person, :class => "fluid-thumbnail-grid-image-image")
      .fluid-thumbnail-grid-image-overlay
      .fluid-thumbnail-grid-image-title
        = person.name(@current_community)

  -# If logged in
  - if @current_user
    -# If company views a profile
    -if @current_user.is_organization
      - if current_user?(person)
        -# If company views another profile and this renders the company itself
        = render :partial => "people/edit_profile_button"

      - elsif (defined? company && current_user?(company)) && origin == "show_employees"
        -# If company views its own profile and this renders an employee
        = render :partial => "people/employ_button", :locals => { :person => person, :company => company }

      - elsif @current_user.has_admin_rights_in?(@current_community) && origin == "show_employees"
        -# If admin views a companies profile and this renders an employee
        = render :partial => "people/employ_button", :locals => { :person => person, :company => company }

      - elsif origin == "trusted_companies"
        -# If company views a companies profile and this renders a trusted company
        = render :partial => "people/trust_button", :locals => { :person => person }

      -elsif person.is_organization
        -# If company views a employees profile and this renders a followed company
        = render :partial => "people/trust_button", :locals => { :person => person }
      -else
        -# If company views a employees profile and this renders a followed employee, do not show the follow button

    - else
      -# If employee views a profile
      - if current_user?(person)
        -# If employee views another profile and this renders the employee itself
        = render :partial => "people/edit_profile_button"

      -else
        = render :partial => "people/follow_button", :locals => { :person => person }
