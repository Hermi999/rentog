- content_for :javascript do
  ST.initializeManageMembers();

- content_for :title_header do
  %h1
    = t("layouts.admin.admin")
    = "-"
    = t("admin.communities.manage_members.manage_members")

= render :partial => "admin/left_hand_navigation", :locals => { :links => admin_links_for(@current_community) }

- content_for :ajax_update do
  #admin-members-saving-posting-allowed.ajax-update-notice
    %span.ajax-update-icon{:class => "#{icon_class("loading")} icon-fix" }
    %span.ajax-update-text
      = t("admin.communities.manage_members.saving_user_status")
  #admin-members-saved-posting-allowed.ajax-update-success
    %span.ajax-update-icon{:class => "#{icon_class("check")} icon-fix" }
    %span.ajax-update-text
      = t("admin.communities.manage_members.save_user_status_successful")
  #admin-members-error-posting-allowed.ajax-update-error
    = t("admin.communities.manage_members.save_user_status_error")

= render :partial => "layouts/ajax-update-notification"

.left-navi-section
  %h2= t("admin.communities.manage_members.manage_members", :community_name => @community.name(I18n.locale))

  %span#admin_members_count= page_entries_info(@memberships, :model => "Person")

  %form
    %table#admin_members_list
      %thead
        %tr
          %th= render partial: "layouts/sort_link", locals: { column: "name", direction: sort_link_direction("name"), title: t("admin.communities.manage_members.name") }
          %th= render partial: "layouts/sort_link", locals: { column: "email", direction: sort_link_direction("email"), title: t("admin.communities.manage_members.email") }
          %th= render partial: "layouts/sort_link", locals: { column: "join_date", direction: sort_link_direction("join_date"), title: t("admin.communities.manage_members.join_date") }
          - if @current_community.require_verification_to_post_listings
            %th{:style => "text-align: center"}= render partial: "layouts/sort_link", locals: { column: "posting_allowed", direction: sort_link_direction("posting_allowed"), title: t("admin.communities.manage_members.posting_allowed") }
          %th= render partial: "layouts/sort_link", locals: { column: "orga", direction: sort_link_direction("orga"), title: t("admin.communities.manage_members.organization") }
          %th= t("admin.communities.manage_members.admin")
          %th= t("admin.communities.manage_members.ban_user")
      %tbody
        - @memberships.each do |membership|
          - member = membership.person
          %tr
            %td.admin-members-full-name
              = link_to member.full_name(@current_community), member
            %td
              = mail_to member.confirmed_notification_email_addresses.first

            %td= l(membership.created_at, :format => :short_date)
            - if @current_community.require_verification_to_post_listings
              - # While the Rentog admin can allow a company to post listings, it doesn't make sense to verify every employee of a company.
              - # So any way (either if an employee is allowed to post listings or not) the verification of an employee can be done by the company admin.
              - # Anyhow, the admin can also verify an employee for a company.
              - if member.is_organization
                %td{:style => "text-align: center"}= check_box_tag "posting-allowed[#{member.id}]", member.id, membership.can_post_listings, :class => "admin-members-can-post-listings"
              - else
                %td
                -# %td{:style => "text-align: center"}= check_box_tag "posting-allowed[#{member.id}]", member.id, membership.can_post_listings, :class => "admin-members-can-post-listings employee-verified-user"

            %td{:style => "text-align: center"}
              - if member.is_organization
                = icon_tag("cross")

            %td{:style => "text-align: center"}= check_box_tag "is_admin[#{member.id}]", member.id, member.is_admin_of?(@community), :class => "admin-members-is-admin", :disabled => member.eql?(@current_user)

            %td{:style => "text-align: center"}
              = link_to(icon_tag("cross"), ban_admin_community_community_membership_path(@current_community.id, membership.id), method: :put, :data => {:confirm => t("admin.communities.manage_members.ban_user_confirmation")}, :class => "admin-members-remove-user")

  .row
    .col-12
      = will_paginate @memberships
